import streamlit as st
import pandas as pd
import numpy as np
import os
import shutil
import atexit
from analytics_functions import load_data, add_player_age, filter_players, find_age_group, filter_stats, \
    find_prev_season, find_prev_stat, create_pivot_df, create_template_matrix, find_stat_diff, populate_matrix,\
    populate_custom_matrix, transition_count_matrix, build_rs_matrix, fill_missing_values_from_influence

RAW_DIR = "data/raw"
os.makedirs(RAW_DIR, exist_ok=True)

def cleanup_data_folders():
    for folder in ["data/raw", "data/processed"]:
        try:
            shutil.rmtree(folder)        # remove folder and contents
            os.makedirs(folder, exist_ok=True)  # recreate empty folder
        except Exception as e:
            print(f"Error cleaning {folder}: {e}")

atexit.register(cleanup_data_folders)

st.title('Football League Transitions Analysis')
st.write('This app analyzes trends in player transitions between football leagues.')
st.write('The transition matrices in the next page show the average change in selected statistics when players move from one league to another.')
st.write('Upload your data in CSV format to get started. This data must have the same naming conventions as Hudl Statsbomb\'s API. No data is stored, nor used to train any models.')

player_stats_file = st.file_uploader('Upload Player Stats* CSV', type= ['csv'])
st.markdown(
    "ℹ️ *Note*: This CSV should contain data equivalent to the one downloadable from the player-stats endpoint."
)

player_catalog_file = st.file_uploader('Upload Player Catalog CSV (optional)', type= ['csv'])
st.markdown(
    "ℹ️ *Note*: Data generated by user, must contain player_name and player_id columns."
)

team_catalog_file = st.file_uploader('Upload Team Catalog CSV (optional)', type= ['csv'])
st.markdown(
    "ℹ️ *Note*: Data generated by user, must contain team_name and team_id columns."
)

player_season_catalog_file = st.file_uploader('Upload Player Season Catalog CSV (optional)', type= ['csv'])
st.markdown(
    "ℹ️ *Note*: Data generated by user, must contain player_name, player_id,team_name, team_id, competition_name, competition_id, season_id, season_name columns."
)

def save_uploaded_file(uploaded_file):
    if uploaded_file is not None:
        file_path = os.path.join(RAW_DIR, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        return file_path
    return None

stats_path = save_uploaded_file(player_stats_file)
catalog_path = save_uploaded_file(player_catalog_file)
team_path = save_uploaded_file(team_catalog_file)
season_path = save_uploaded_file(player_season_catalog_file)

if player_stats_file is not None:
    try:
        df = load_data(player_stats_file, player_catalog_file, team_catalog_file, player_season_catalog_file)
        st.session_state.df = df
        st.success('Data loaded successfully')
        st.write('### Preview of your dataset:')
        st.dataframe(df.head(n=20))
    except Exception as e:
        st.error(f"Error loading data: {e}")


    